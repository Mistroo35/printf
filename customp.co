
#include <stdarg.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>
/**
* printChar - print chat to stout
* @Char: Char to print
* Return: 1
*/

int printChar(int Char)
{
	return (write(1, &Char, 1));
}

/**
* printString - Function to print print string
* @String: String to print
* Return: Length of string
*/

int printString(char *String)
{
	int Counter;

	Counter = 0;
	if (String == NULL)
	{
		String = "(null)";
		while (*String)
		{
			printChar((int)*String);
			++Counter;
			++String;
		}
		return (Counter);
	}
	else
	{
		while (*String)
		{
			printChar((int)*String);
			++Counter;
			++String;
		}
	}
	return (Counter);
}

/**
 * printDigit - print Digits
 * @Number: Number to prin
 * @Base: System base
 * Return: Count of Digits
*/

int printDigit(long Number, int Base)
{
	int Counter;
	char *Symbols;

	Counter = 0;
	Symbols = "0123456789abcdef";
	if (Number < 0)
	{
		write(1, "-", 1);
		return (printDigit(-Number, Base) + 1);
	}
	else if (Number < Base)
	{
		return (printChar(Symbols[Number]));
	}
	else
	{
		Counter = printDigit(Number / Base, Base);
		return (Counter + printDigit(Number % Base, Base));
	}

}

/**
 * printHexa - print HexaDecimalNumber
 * @Number: Number to prin
 * @Base: System base
 * Return: Count of Digits
*/

int printHexa(long Number, int Base)
{
	int Counter;
	char *Symbols;

	Counter = 0;
	Symbols = "0123456789ABCDEF";
	if (Number < 0)
	{
		write(1, "-", 1);
		return (printHexa(-Number, Base) + 1);
	}
	else if (Number < Base)
	{
		return (printChar(Symbols[Number]));
	}
	else
	{
		Counter = printHexa(Number / Base, Base);
		return (Counter + printHexa(Number % Base, Base));
	}

}

/**
* handleFormat - print after specifier
* @Specifier: the type of content
* @PtrArg: content
* Return: Counter of chars
*/

int handleFormat(char Specifier, va_list PtrArg)
{
	int Counter;

	Counter = 0;
	if (Specifier == 'c')
	{
		Counter += printChar(va_arg(PtrArg, int));
	}
	else if (Specifier == 's')
	{
		Counter += printString(va_arg(PtrArg, char *));
	}
	else if (Specifier == 'd' || Specifier == 'i')
	{
		Counter += printDigit((long)(va_arg(PtrArg, int)), 10);
	}
	else if (Specifier == 'x')
	{
		Counter += printDigit(va_arg(PtrArg, unsigned int), 16);
	}
	else if (Specifier == 'o')
	{
		Counter += printDigit(va_arg(PtrArg, unsigned int), 8);
	}
	else if (Specifier == 'u')
	{
		Counter += printDigit(va_arg(PtrArg, unsigned int), 10);
	}
	else if (Specifier == 'X')
	{
		Counter += printHexa(va_arg(PtrArg, unsigned int), 16);
	}
	else
	{
		return (-1);
	}

	return (Counter);
}

/**
* _printf - Custom printf function
* @Format: to print
* Return: Count of chars
*/

int _printf(const char *Format, ...)
{
	va_list PtrArg;
	int Counter;

	va_start(PtrArg, Format);
	Counter = 0;
	if (Format == NULL || (Format[0] == '%' && Format[1] == '\0'))
		return (-1);
	while (*Format)
	{
		if (*Format == '%')
		{
			Counter += handleFormat(*++Format, PtrArg);
		}
		else
		{
			Counter += write(STDIN_FILENO, Format, 1);
		}
		++Format;
	}
	va_end(PtrArg);

	return (Counter);
}

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
    int len;
    int len2;
    unsigned int ui;
    void *addr;

    len = _printf("Let's try to printf a simple sentence.\n");
    len2 = printf("Let's try to printf a simple sentence.\n");
    ui = (unsigned int)INT_MAX + 1024;
    addr = (void *)0x7ffe637541f0;
    _printf("Length:[%d, %i]\n", len, len);
    printf("Length:[%d, %i]\n", len2, len2);
    _printf("Negative:[%d]\n", -762534);
    printf("Negative:[%d]\n", -762534);
    _printf("Unsigned:[%u]\n", ui);
    printf("Unsigned:[%u]\n", ui);
    _printf("Unsigned octal:[%o]\n", ui);
    printf("Unsigned octal:[%o]\n", ui);
    _printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    printf("Unsigned hexadecimal:[%x, %X]\n", ui, ui);
    _printf("Character:[%c]\n", 'H');
    printf("Character:[%c]\n", 'H');
    _printf("String:[%s]\n", "I am a string !");
    printf("String:[%s]\n", "I am a string !");
    _printf("Address:[%p]\n", addr);
    printf("Address:[%p]\n", addr);
    len = _printf("Percent:[%%]\n");
    len2 = printf("Percent:[%%]\n");
    _printf("Len:[%d]\n", len);
    printf("Len:[%d]\n", len2);
    _printf("Unknown:[%r]\n");
    printf("Unknown:[%r]\n");
    return (0);
}
